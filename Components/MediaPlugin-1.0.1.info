{"Name":"Media Plugin","Id":2036,"Alias":"MediaPlugin","Description":"# Media Plugin Details\r\n\r\n Simple cross platform plugin to take photos and video or pick them from a gallery from shared code.\r\n\r\n\r\n\r\n### Photos\r\n```csharp\r\n/// \u003csummary\u003e\r\n/// Picks a photo from the default gallery\r\n/// \u003c/summary\u003e\r\n/// \u003creturns\u003eMedia file or null if canceled\u003c/returns\u003e\r\nTask\u003cMediaFile\u003e PickPhotoAsync();\r\n\r\n/// \u003csummary\u003e\r\n/// Take a photo async with specified options\r\n/// \u003c/summary\u003e\r\n/// \u003cparam name=\"options\"\u003eCamera Media Options\u003c/param\u003e\r\n/// \u003creturns\u003eMedia file of photo or null if canceled\u003c/returns\u003e\r\nTask\u003cMediaFile\u003e TakePhotoAsync(StoreCameraMediaOptions options);\r\n```\r\n\r\n### Videos\r\n```csharp\r\n/// \u003csummary\u003e\r\n/// Picks a video from the default gallery\r\n/// \u003c/summary\u003e\r\n/// \u003creturns\u003eMedia file of video or null if canceled\u003c/returns\u003e\r\nTask\u003cMediaFile\u003e PickVideoAsync();\r\n\r\n/// \u003csummary\u003e\r\n/// Take a video with specified options\r\n/// \u003c/summary\u003e\r\n/// \u003cparam name=\"options\"\u003eVideo Media Options\u003c/param\u003e\r\n/// \u003creturns\u003eMedia file of new video or null if canceled\u003c/returns\u003e\r\nTask\u003cMediaFile\u003e TakeVideoAsync(StoreVideoOptions options);\r\n```\r\n\r\n### Usage\r\nVia a Xamarin.Forms project with a Button and Image to take a photo:\r\n\r\n```csharp\r\n      takePhoto.Clicked += async (sender, args) =\u003e\r\n        {\r\n\r\n          if (!CrossMedia.Current.IsCameraAvailable || !CrossMedia.Current.PhotosSupported)\r\n          {\r\n            DisplayAlert(\"No Camera\", \":( No camera avaialble.\", \"OK\");\r\n            return;\r\n          }\r\n\r\n          var file = await CrossMedia.Current.TakePhotoAsync(new Media.Plugin.Abstractions.StoreCameraMediaOptions\r\n            {\r\n\r\n              Directory = \"Sample\",\r\n              Name = \"test.jpg\"\r\n            });\r\n\r\n          if (file == null)\r\n            return;\r\n\r\n          DisplayAlert(\"File Location\", file.Path, \"OK\");\r\n\r\n          image.Source = ImageSource.FromStream(() =\u003e\r\n          {\r\n            var stream = file.GetStream();\r\n            file.Dispose();\r\n            return stream;\r\n          }); \r\n        };\r\n```","Version":"1.0.1","Summary":"Simple cross platform plugin to take photos and video or pick them from a gallery from shared code.","QuickStart":"# Getting Started with Media Plugin\r\n\r\n\r\n\r\n### API Usage\r\n\r\nCall **CrossMedia.Current** from any project or PCL to gain access to APIs.\r\n\r\nBefore taking photos or videos you should check to see if a camera exists and if photos and videos are supported on the device. There are three properties that you can check:\r\n\r\n```csharp\r\n/// \u003csummary\u003e\r\n/// Gets if a camera is available on the device\r\n/// \u003c/summary\u003e\r\nbool IsCameraAvailable { get; }\r\n    \r\n/// \u003csummary\u003e\r\n/// Gets if Photos are supported on the device\r\n/// \u003c/summary\u003e\r\nbool PhotosSupported { get; }\r\n    \r\n/// \u003csummary\u003e\r\n/// Gets if Videos are supported on the device\r\n/// \u003c/summary\u003e\r\nbool VideosSupported { get; }\r\n```\r\n\r\n### Photos\r\n```csharp\r\n/// \u003csummary\u003e\r\n/// Picks a photo from the default gallery\r\n/// \u003c/summary\u003e\r\n/// \u003creturns\u003eMedia file or null if canceled\u003c/returns\u003e\r\nTask\u003cMediaFile\u003e PickPhotoAsync();\r\n\r\n/// \u003csummary\u003e\r\n/// Take a photo async with specified options\r\n/// \u003c/summary\u003e\r\n/// \u003cparam name=\"options\"\u003eCamera Media Options\u003c/param\u003e\r\n/// \u003creturns\u003eMedia file of photo or null if canceled\u003c/returns\u003e\r\nTask\u003cMediaFile\u003e TakePhotoAsync(StoreCameraMediaOptions options);\r\n```\r\n\r\n### Videos\r\n```csharp\r\n/// \u003csummary\u003e\r\n/// Picks a video from the default gallery\r\n/// \u003c/summary\u003e\r\n/// \u003creturns\u003eMedia file of video or null if canceled\u003c/returns\u003e\r\nTask\u003cMediaFile\u003e PickVideoAsync();\r\n\r\n/// \u003csummary\u003e\r\n/// Take a video with specified options\r\n/// \u003c/summary\u003e\r\n/// \u003cparam name=\"options\"\u003eVideo Media Options\u003c/param\u003e\r\n/// \u003creturns\u003eMedia file of new video or null if canceled\u003c/returns\u003e\r\nTask\u003cMediaFile\u003e TakeVideoAsync(StoreVideoOptions options);\r\n```\r\n\r\n### Usage\r\nVia a Xamarin.Forms project with a Button and Image to take a photo:\r\n\r\n```csharp\r\n      takePhoto.Clicked += async (sender, args) =\u003e\r\n        {\r\n\r\n          if (!CrossMedia.Current.IsCameraAvailable || !CrossMedia.Current.PhotosSupported)\r\n          {\r\n            DisplayAlert(\"No Camera\", \":( No camera avaialble.\", \"OK\");\r\n            return;\r\n          }\r\n\r\n          var file = await CrossMedia.Current.TakePhotoAsync(new Media.Plugin.Abstractions.StoreCameraMediaOptions\r\n            {\r\n\r\n              Directory = \"Sample\",\r\n              Name = \"test.jpg\"\r\n            });\r\n\r\n          if (file == null)\r\n            return;\r\n\r\n          DisplayAlert(\"File Location\", file.Path, \"OK\");\r\n\r\n          image.Source = ImageSource.FromStream(() =\u003e\r\n          {\r\n            var stream = file.GetStream();\r\n            file.Dispose();\r\n            return stream;\r\n          }); \r\n        };\r\n```\r\n\r\n\r\n### **IMPORTANT**\r\n**Android:**\r\n\r\nYou must request `WRITE_EXTERNAL_STORAGE` permission\r\n\r\n**Windows Phone 8/8.1 Silverlight:**\r\n\r\nYou must set the `IC_CAP_ISV_CAMERA` permission.\r\n\r\nWP 8/8.1 Silverlight only supports photo, not video.\r\n\r\n**Windows Phone 8.1 RT:**\r\n\r\nSet `Webcam` permission.\r\n\r\nIn your App.xaml.cs you MUST place the following code:\r\n\r\n```csharp\r\nMedia.Plugin.MediaImplementation.OnFilesPicked(args);\r\n```\r\n\r\n**Windows Store:**\r\n\r\nSet `Webcam` permission.\r\n","Hash":"7d5f6637263ea60c3d3c04cf2dc8527c","TargetPlatforms":["ios","ios-unified","android"],"TrialHash":null}